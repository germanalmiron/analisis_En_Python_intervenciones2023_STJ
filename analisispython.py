# -*- coding: utf-8 -*-
"""analisispython.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JHSGrh6v9XcsLjU9LcAqbR5SwROaues1

#####Paso 1: Carga del Dataset
#####1. Se sube el archivo CSV usando files.upload().
#####2. Carga el dataset usando pd.read_csv() con los parámetros encoding='latin1' y delimiter=';'.
#####3. Muestra las primeras filas del dataset con print(dataset.head()).
"""

# Importar bibliotecas necesarias
import pandas as pd
from google.colab import files

# Subir el archivo CSV desde la computadora
uploaded = files.upload()

# Cargar el dataset desde el archivo CSV utilizando pandas
dataset = pd.read_csv('datos-abiertos-intervenciones-2023-para-publicar.csv', encoding='latin1', delimiter=';')

# Mostrar las primeras filas del dataset para verificar su carga correcta
print(dataset.head())

"""####Paso 2: Inspección y Exploración de Datos
La inspección y exploración inicial del dataset son pasos cruciales para entender la estructura y la calidad de los datos con los que vamos a trabajar.

Propósito: Este comando proporciona un resumen conciso del dataframe, incluyendo el número de entradas (filas), el nombre de cada columna, el número de valores no nulos en cada columna y el tipo de datos de cada columna.

Importancia: Nos permite verificar que todas las columnas se han importado correctamente y entender la estructura general del dataset. También ayuda a identificar rápidamente las columnas que contienen valores nulos y los tipos de datos, lo cual es crucial para futuras transformaciones y análisis.
"""

# Inspeccionar la estructura del dataset
print(dataset.info())

"""#####Generar estadísticas descriptivas del dataset

Propósito: Este comando genera estadísticas descriptivas para las columnas numéricas del dataset, como la media, la desviación estándar, los valores mínimo y máximo, y los percentiles (25%, 50% y 75%).

Importancia: Nos proporciona una visión rápida de la distribución y las características generales de los datos numéricos. Esto es útil para identificar posibles valores atípicos, comprender la dispersión de los datos y obtener una idea inicial de las tendencias y patrones en el dataset.
"""

print(dataset.describe())

"""#####Mostrar un resumen de los valores nulos en cada columna

Propósito: Este comando cuenta el número de valores nulos en cada columna del dataset.

Importancia: Identificar la cantidad de datos faltantes en cada columna es esencial para la limpieza de datos. Nos permite decidir si debemos eliminar filas o columnas con valores nulos, o si es necesario imputar (rellenar) estos valores utilizando alguna estrategia apropiada. La presencia de valores nulos puede afectar significativamente los resultados del análisis y los modelos predictivos.
"""

print(dataset.isnull().sum())

"""#####PASO 3: Limpieza los Datos

Se revisa los datos para identificar y manejar cualquier inconsistencia o valor nulo.

1. Elimina filas con valores nulos usando dataset.dropna().
2. Convierte las columnas de fechas al formato datetime con pd.to_datetime().
3. Verifica las primeras filas del dataset limpio con print(dataset_clean.head()).
"""

# Eliminar filas con valores nulos (opcional)
dataset_clean = dataset.dropna()

# Mostrar las primeras filas del dataset limpio
print(dataset_clean.head())

"""#####Paso 4: Transformación de Datos
Realiza las transformaciones necesarias en los datos. Por ejemplo, convertir las fechas al formato datetime.
"""

# Convertir columnas de fecha al formato datetime
dataset_clean.loc[:, 'FECHA_INTERV'] = pd.to_datetime(dataset_clean['FECHA_INTERV'], format='%d/%m/%Y')
dataset_clean.loc[:, 'FECHA_HECHO'] = pd.to_datetime(dataset_clean['FECHA_HECHO'], format='%d/%m/%Y')

# Verificar la transformación
print(dataset_clean[['FECHA_INTERV', 'FECHA_HECHO']].head())

"""#####1. Conversión de columnas de fecha al formato datetime:

dataset_clean.loc[:, 'FECHA_INTERV'] y dataset_clean.loc[:, 'FECHA_HECHO']: Usando .loc, se seleccionan todas las filas (indicado por :) y las columnas especificadas ('FECHA_INTERV' y 'FECHA_HECHO') en el DataFrame dataset_clean.

pd.to_datetime(...): Convierte los valores en las columnas seleccionadas de texto a objetos datetime de pandas. El parámetro format='%d/%m/%Y' indica que el formato de fecha en las columnas es día/mes/año.

#####2. Verificación de la transformación:

dataset_clean[['FECHA_INTERV', 'FECHA_HECHO']]: Selecciona las columnas 'FECHA_INTERV' y 'FECHA_HECHO' del DataFrame dataset_clean.

.head(): Muestra las primeras 5 filas de las columnas seleccionadas. Esto te permite verificar que las fechas se han convertido correctamente al formato datetime.

#####Paso 4: Análisis Exploratorio de Datos (EDA)

En este paso del análisis exploratorio de datos (EDA), se utilizan dos tipos de visualizaciones para entender mejor la distribución de algunas variables en el conjunto de datos.

#####Histograma de la Edad en el Momento del Hecho
"""

import matplotlib.pyplot as plt

# Crear histograma de la edad en el momento del hecho
plt.figure(figsize=(10, 6))
dataset_clean['EDAD_HECHO'].hist()
plt.xlabel('Edad en el momento del hecho')
plt.ylabel('Frecuencia')
plt.title('Distribución de edades')
plt.show()

"""#####¿Qué se está haciendo aquí?
Se está creando un histograma que muestra la distribución de las edades de las personas en el momento en que ocurrió el hecho. El histograma es una gráfica de barras donde cada barra representa la frecuencia de un rango de edades (bins). Se utiliza para entender cómo se distribuyen las edades en el conjunto de datos, es decir, cuáles son las edades más comunes y menos comunes.

¿Qué muestran los ejes?
Eje X (Horizontal): Las diferentes categorías de edad (rango de edades).

Eje Y (Vertical): La cantidad de personas que caen dentro de cada categoría de edad.

¿Qué se debe observar?
Las barras altas indican rangos de edad con más personas.
Las barras bajas indican rangos de edad con menos personas.

#####Para corroborar y obtener solo las edades del dataset, podemos filtrar la columna EDAD_HECHO y realizar un análisis más detallado.

1. Cargar el dataset con el delimitador correcto
2. Filtrar y limpiar la columna de edades
3. Generar el histograma
"""



# Filtrar la columna de edades
edades = dataset['EDAD_HECHO']

# Limpiar los datos: convertir a numérico y eliminar no numéricos
edades = pd.to_numeric(edades, errors='coerce')
edades = edades.dropna()

# Crear histograma de la edad en el momento del hecho
plt.figure(figsize=(10, 6))
edades.hist(bins=range(int(edades.min()), int(edades.max()) + 1))
plt.xlabel('Edad en el momento del hecho')
plt.ylabel('Frecuencia')
plt.title('Distribución de edades')
plt.show()

"""#####Paso 5: Identificación de Patrones y Tendencias

Importar Librerías Necesarias:

Antes de crear los gráficos, es necesario importar las librerías matplotlib.pyplot como plt y seaborn como sns. Estas librerías se utilizan para la visualización de datos.
"""

import matplotlib.pyplot as plt
import seaborn as sns

"""#####Crear un Gráfico de Dispersión entre la Edad y la Cantidad de Intervenciones Anteriores:

Descripción: El gráfico de dispersión permite visualizar la relación entre la edad en el momento del hecho (EDAD_HECHO) y la cantidad de intervenciones anteriores (CANT_ITV_ANTERIORES).

Configuración:
Se establece el tamaño del gráfico con plt.figure(figsize=(10, 6)).

Se utiliza sns.scatterplot() para crear el gráfico de dispersión con los datos de dataset_clean.

Se etiquetan los ejes X e Y con plt.xlabel() y plt.ylabel() respectivamente.

Se añade un título al gráfico con plt.title().
Finalmente, se muestra el gráfico con plt.show()
"""

plt.figure(figsize=(10, 6))
sns.scatterplot(data=dataset_clean, x='EDAD_HECHO', y='CANT_ITV_ANTERIORES')
plt.xlabel('Edad en el momento del hecho')
plt.ylabel('Cantidad de intervenciones anteriores')
plt.title('Relación entre Edad y Cantidad de Intervenciones Anteriores')
plt.show()

"""#####Crear un Gráfico de Cajas para la Distribución de Edades por Nacionalidad:

Descripción: El gráfico de cajas (boxplot) permite visualizar la distribución de edades (EDAD_HECHO) por nacionalidad (NACIONALIDAD). Este tipo de gráfico es útil para identificar la mediana, los cuartiles y los valores atípicos de las edades por cada grupo de nacionalidad.
Configuración:

Se establece el tamaño del gráfico con plt.figure(figsize=(14, 7)).

Se utiliza sns.boxplot() para crear el gráfico de cajas con los datos de dataset_clean.

Se rotan las etiquetas del eje X 90 grados para mejorar la legibilidad con plt.xticks(rotation=90).

Se etiquetan los ejes X e Y con plt.xlabel() y plt.ylabel() respectivamente.

Se añade un título al gráfico con plt.title().
Finalmente, se muestra el gráfico con plt.show().
"""

plt.figure(figsize=(14, 7))
sns.boxplot(data=dataset_clean, x='NACIONALIDAD', y='EDAD_HECHO')
plt.xticks(rotation=90)
plt.xlabel('Nacionalidad')
plt.ylabel('Edad en el momento del hecho')
plt.title('Distribución de Edades por Nacionalidad')
plt.show()